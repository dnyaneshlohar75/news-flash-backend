// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model users {
  userId        String     @unique @default(uuid())
  firstName     String
  lastName      String
  emailId       String     @unique
  contactNumber Int?
  password      String
  profileUrl    String?
  type          UserType   @default(user)
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  posts         posts[]
  like          like[]
  comments      comments[]
}

enum UserType {
  user
  admin
  author
}

model article {
  articleId   String     @unique @default(uuid())
  sourceId    String
  sourceName  String
  author      String?
  title       String
  description String?
  url         String
  urlToImage  String
  content     String?
  like        like[]
  comments    comments[]
  publishedAt DateTime   @default(now())
}

model posts {
  postId      String     @unique @default(uuid())
  userId      String
  users       users?     @relation(fields: [userId], references: [userId])
  title       String
  description String?
  images      String[]
  like        like[]
  comments    comments[]
  createdAt   DateTime   @default(now())
}

model comments {
  commentId String   @unique @default(uuid())
  articleId String
  article   article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  userId    String
  user      users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  comment   String
  createdAt DateTime @default(now())
  posts     posts?   @relation(fields: [PostId], references: [postId])
  PostId    String?
}

model like {
  id        String  @id @default(uuid())
  userId    String
  articleId String
  user      users   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  news      article @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  posts     posts?  @relation(fields: [PostId], references: [postId])
  PostId    String?
}
